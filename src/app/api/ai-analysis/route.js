import { NextResponse } from "next/server";
console.log("üî• PROD OPENROUTER_API_KEY =", process.env.OPENROUTER_API_KEY);
import axios from "axios";

const COMMON_SYS =
  "–í—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏. " +
  "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤.";

const MODELS = [
  "openai/gpt-4o-mini",          // –æ—Å–Ω–æ–≤–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  "anthropic/claude-3-haiku-20240307", // fallback #1
  "mistralai/mistral-7b-instruct",     // fallback #2
];

export async function POST(request) {
  try {
    const { prompt } = await request.json();
    if (!prompt) {
      return NextResponse.json({ error: "Missing prompt" }, { status: 400 });
    }

    let answer = null;
    for (const model of MODELS) {
      try {
        const { data } = await axios.post(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            model,
            messages: [
              { role: "system", content: COMMON_SYS },
              { role: "user", content: prompt },
            ],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              "Content-Type": "application/json",
            },
            timeout: 20000,
          }
        );
        answer = data.choices?.[0]?.message?.content?.trim();
        if (answer) break;
      } catch (e) {
        console.warn("openrouter failure for model", model, e.message);
      }
    }

    if (!answer) {
      return NextResponse.json(
        { text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI." },
        { status: 500 }
      );
    }

    // return NextResponse.json({ text: answer });

    const response = NextResponse.json({ text: answer });
    response.headers.set("Access-Control-Allow-Origin", "*");
    return response;
  } catch (e) {
    console.error("AI-analysis route error", e);
    return NextResponse.json({ error: "Internal error" }, { status: 500 });
  }
}
