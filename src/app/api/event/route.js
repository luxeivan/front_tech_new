export const runtime = "nodejs";

export const clients = new Map();

function safeRemove(id, writer) {
  try {
    writer.close();
  } catch {}
  clients.delete(id);
}

// –µ–¥–∏–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
export function broadcast(payload) {
  const data = `data: ${JSON.stringify(payload)}\n\n`;
  for (const [id, writer] of clients) {
    try {
      writer.write("event: message\n");
      writer.write(data);
    } catch (e) {
      console.error("SSE writer error, drop client", id, e?.message);
      safeRemove(id, writer);
    }
  }
}

// SSE endpoint
export async function GET(request) {
  const { readable, writable } = new TransformStream();
  const writer = writable.getWriter();
  const clientId = Date.now() + Math.random();
  clients.set(clientId, writer);
  console.log(
    `üì° SSE: –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (${clientId}), –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`
  );

  request.signal.addEventListener("abort", () => {
    console.log(`üì¥ SSE: –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω (${clientId})`);
    safeRemove(clientId, writer);
  });

  writer.write("event: message\n");
  writer.write(`data: ${JSON.stringify({ message: "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SSE" })}\n\n`);

  return new Response(readable, {
    headers: {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache, no-transform",
      Connection: "keep-alive",
    },
  });
}

import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    const payload = await request.json();
    console.log("üì¨ SSE POST: –ø–æ–ª—É—á–µ–Ω payload:", payload);
    broadcast(payload);
    return NextResponse.json({ message: "–°–æ–±—ã—Ç–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º" });
  } catch (err) {
    console.error("‚ùóÔ∏è SSE POST error:", err);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–±—ã—Ç–∏—è" },
      { status: 500 }
    );
  }
}

// export const runtime = 'nodejs';

// export const clients = new Map();

// // SSE endpoint: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
// export async function GET(request) {
//   const { readable, writable } = new TransformStream();
//   const writer = writable.getWriter();
//   const clientId = Date.now() + Math.random();
//   clients.set(clientId, writer);
//   console.log(`üì° SSE: –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (${clientId}), –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);

//   // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
//   request.signal.addEventListener('abort', () => {
//     console.log(`üì¥ SSE: –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω (${clientId})`);
//     writer.close();
//     clients.delete(clientId);
//   });

//   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//   writer.write(`event: message\n`);
//   writer.write(`data: ${JSON.stringify({ message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SSE' })}\n\n`);

//   return new Response(readable, {
//     headers: {
//       'Content-Type': 'text/event-stream',
//       'Cache-Control': 'no-cache, no-transform',
//       Connection: 'keep-alive',
//     },
//   });
// }

// // Broadcast endpoint: —Ä–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π payload –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
// import { NextResponse } from 'next/server';

// export async function POST(request) {
//   try {
//     const payload = await request.json();
//     console.log('üì¨ SSE POST: –ø–æ–ª—É—á–µ–Ω payload:', payload);
//     for (const [id, writer] of clients) {
//       writer.write(`event: message\n`);
//       writer.write(`data: ${JSON.stringify(payload)}\n\n`);
//     }
//     return NextResponse.json({ message: '–°–æ–±—ã—Ç–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º' });
//   } catch (err) {
//     console.error('‚ùóÔ∏è SSE POST error:', err);
//     return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–±—ã—Ç–∏—è' }, { status: 500 });
//   }
// }
