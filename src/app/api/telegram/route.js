import { NextResponse } from "next/server";

const BOT = process.env.TELEGRAM_BOT_TOKEN;
const CHAT = process.env.TELEGRAM_CHAT_ID;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ JSON ‚Äì –≤–µ—Ä–Ω—ë–º null.
 */
async function safeParseJSON(request) {
  try {
    const text = await request.text();
    return text ? JSON.parse(text) : null;
  } catch {
    return null;
  }
}

export async function POST(req) {
  try {
    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. –ß–∏—Ç–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    const body = await safeParseJSON(req);
    const incident = body?.incident;
    if (!incident || !incident.start_date) {
      return NextResponse.json(
        { ok: false, error: "Empty or invalid body" },
        { status: 400 }
      );
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    const a = incident.AddressInfo ?? {};
    const d = incident.DisruptionStats ?? {};

    const text = [
      "üÜï *–¢–ù*",
      `*${incident.start_date}* ${incident.start_time?.slice(0, 5) || ""}`,
      a.city_name || "‚Äî",
      (a.Street ?? []).map((s) => s.street_name).join(", ") || "‚Äî",
      "",
      incident.description?.[0]?.children?.[0]?.text ?? "",
      "",
      `*–ù–∞—Å. –ø—É–Ω–∫—Ç–æ–≤*: ${d.affected_settlements ?? 0}`,
      `*–ñ–∏—Ç–µ–ª–µ–π*:      ${d.affected_residents ?? 0}`,
      `*–ú–ö–î*:          ${d.affected_mkd ?? 0}`,
      `*–ë–æ–ª—å–Ω–∏—Ü*:      ${d.affected_hospitals ?? 0}`,
      `*–ö–æ—Ç–µ–ª—å–Ω—ã—Ö*:    ${d.boiler_shutdown ?? 0}`,
    ]
      .filter(Boolean)
      .join("\n");

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    const tgRes = await fetch(
      `https://api.telegram.org/bot${BOT}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: CHAT,
          text,
          parse_mode: "Markdown",
        }),
      }
    );

    if (!tgRes.ok) {
      const errText = await tgRes.text();
      throw new Error(`Telegram API error: ${tgRes.status} ‚Äì ${errText}`);
    }

    return NextResponse.json({ ok: true });
  } catch (err) {
    console.error("Telegram error:", err);
    return NextResponse.json(
      { ok: false, error: err.message },
      { status: 500 }
    );
  }
}
